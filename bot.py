from aiogram import types, Bot, executor, Dispatcher
import buttons
from weather_broadcast import WeatherBroadcast
from data_base import SQLighter
import asyncio


TOKEN = "1337329290:AAF1mQVdAPSgiNBANs39lng_4FsWtDVHtVE"

bot = Bot(TOKEN)
flag = False
dp = Dispatcher(bot)

db = SQLighter('database.db')


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç, –¥–µ–ª–∞—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n'
                        '–î–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—Éüëá', reply_markup=buttons.start_kb)


@dp.message_handler(regexp='–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')
async def process_change_city_command(message: types.Message):
    global flag
    flag = True
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ", reply_markup=buttons.cancel_kb)


@dp.message_handler(regexp='([A-Za-z])+')
async def process_city_name_command(message: types.Message):
    global flag
    if flag == False:
        return
    try:
        WeatherBroadcast(message.text).broadcast()
        if db.subscriber_exists(message.from_user.id):
            db.update_town(message.from_user.id, message.text)
        else:
            db.add_subcriber(message.from_user.id, message.text)
        flag = False
        await bot.send_message(message.from_user.id, "–ì–æ—Ä–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=buttons.kb)
    except:
        await bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥üò•\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=buttons.cancel_kb)


@dp.message_handler(regexp='–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥')
async def process_current_city_command(message: types.Message):
    if db.subscriber_exists(message.from_user.id):
        await bot.send_message(message.from_user.id, db.get_town(message.from_user.id))
    else:
        db.add_subcriber(message.from_user.id, "Moscow")
        await bot.send_message(message.from_user.id, db.get_town(message.from_user.id))


@dp.message_handler(regexp='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑')
async def process_current_temperature_command(message: types.Message):
    await bot.send_message(message.from_user.id, WeatherBroadcast(db.get_town(message.from_user.id)).broadcast())


@dp.message_handler(regexp='–û—Ç–º–µ–Ω–∞')
async def process_cancel_command(message: types.Message):
    global flag
    flag = False
    await bot.send_message(message.from_user.id, "–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=buttons.kb)


@dp.message_handler(regexp='–†–∞—Å—Å—ã–ª–∫–∞')
async def process_mailing_command(message: types.Message):
    await bot.send_message(message.from_user.id, "–í–ê–ñ–ù–û\n–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –µ–∂–µ—á–∞—Å–Ω–æ", reply_markup=buttons.mailing_kb)


@dp.message_handler(regexp='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
async def process_subscribe(message: types.Message):
    if db.get_status(message.from_user.id):
        await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ãüòâ", reply_markup=buttons.kb)
    else:
        db.update_status(message.from_user.id)
        await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!)", reply_markup=buttons.kb)


@dp.message_handler(regexp='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è')
async def process_unsubcscribe(message: types.Message):
    if db.get_status(message.from_user.id) == False:
        await bot.send_message(message.from_user.id, "–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=buttons.kb)
    else:
        db.update_status(message.from_user.id, False)
        await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=buttons.kb)


async def mailing(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        subs = db.get_subscriptions(True)
        for sub in subs:
            await bot.send_message(sub[1], WeatherBroadcast(sub[2]).broadcast())


if __name__ == '__main__':
    dp.loop.create_task(mailing(3600))
    executor.start_polling(dp)
